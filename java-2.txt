package com.wang;

import java.util.Arrays;

/**
 * Created by Administrator on 2017/8/19.
 *
 * 各种排序算法
 */
public class Sort {
    //冒泡排序
    public  void maopao_sort(int[] arr){
        if(arr == null || arr.length == 0){
            return;
        }
        int len = arr.length;
        for(int i = 0; i< len - 1; i++){ //做len - 1次排序
            for(int j = 0; j < len - 1 - i;j++){ //交换元素
                if(arr[j] < arr[j+1]){
                    int temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                }
            }

        }
    }

    /**
     * 快速排序
     */
    public  static void    quick_sort(int[] arr,int start,int end){
        if(start >= end) return;
        int i = start;
        int j = end;
        int value = arr[i];
        boolean flag = true; //这里开始设置为true
        while (i != j){ //这里的条件 不能乱
            if(flag){
                if(value > arr[j]){ //从后往前比较
                    _swap(arr,i,j);
                    flag = false;
                }else{
                    j--;
                }
            }else{
                if(value < arr[i]){ //从前完后比较
                    _swap(arr,i,j);
                    flag = true;
                }else{
                    i++;
                }
            }
        }
        System.out.println(Arrays.toString(arr));
        //这里i = j 所以 用i 和 j是一样的
        quick_sort(arr,start,i-1);
        quick_sort(arr,i+1,end);
    }

    private static void _swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    /**
     * 插入排序
     */
    public static void insertionSort(int[] a){
        int insertIndex,insertElement;
        for(int i = 1; i < a.length; i++){
            insertIndex = i - 1;
            insertElement = a[i];
            while( insertIndex >= 0 && a[insertIndex] > insertElement ){
                a[insertIndex + 1] = a[insertIndex]; //比待插入元素大的元素后移一位 
                insertIndex--;
            }
            a[insertIndex + 1] = insertElement; //待插入元素放到合适的位置
        }
    }

    /**
     * 巧用数组下标，给你n个无序的int整型数组arr，并且这些整数的取值范围都在0-20之间
     * 要你在 O(n) 的时间复杂度中把这n个数按照从小到大的顺序打印出来
     */
    public void printNum(int[] arr){
        int[] temp = new int[21];
        for(int i=0; i<arr.length; i++){ //时间复杂度O(n)
            temp[arr[i]]++;
        }
        //顺序打印
        for(int i=0; i<21; i++){
            for(int j=0; j<temp[i]; j++){
                System.out.print(i); 
            }
        }

    }

    

    /**
     * 利用二分查找计算x的平方根，计算并返回 x 的平方根，其中 x 是非负整数。
     * 由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去
     */  
    public static int sqrt(int x){
        long low = 1;
        long high = x;
        while(low < high){
            long mid = (low + high)/2;
            if(mid * mid == x){
                return mid;
            }else if(mid * mid > x){
                high = mid -1;
            }else{
                low = mid + 1;
            }
        }
        if(low * low > x)
            return (int)(low - 1);
        return (int) low;
    }


    /**
     * 二分查找算法
     * @param
     */
    public static int  binarySearch(int[] arr, int key){
        int low =0;
        int high = arr.length - 1;
        while (low <= hight){
            int mid = (low + hight)/2;
            if(arr[mid] == key){
                return mid;
            }else if(arr[mid] > key){
                hight = mid - 1;
            }else{
                low = mid + 1;
            }
        }
        return  -1;
    }

    /**
     * 字符串 反序
     * @param str
     */

    public static String reverse(String str) {
        if((null== str) || (str.length() <= 1)) {
            return str;
        }
        //return  new StringBuffer(str).reverse().toString();
        StringBuffer reverse = new StringBuffer(str.length());
        for(int i = str.length() - 1; i >= 0; i--) {
            reverse.append(str.charAt(i));
        }
        return reverse.toString();
    }

    /**
     * 字符串 反序 递归实现
     * @param str
     */

    public static String _reverse(String str) {
        if(str == null || str.length() <= 1) { return str;}
        return _reverse(str.substring(1)) + str.charAt(0);
        //return str.charAt(0) + _reverse(str.substring(1));
    }

    public static void main(String[] args) {
        int arr[] = {32,13,78,28,9,45,31,28,29};
        quick_sort(arr,0,arr.length - 1);
        System.out.println(Arrays.toString(arr));
        System.out.println(binarySearch(arr,28));
        System.out.println(_reverse("wangwei"));
    }
}


package com.wang;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * Created by Administrator on 2017/8/20.
 * java实现阻塞队列 -- test
 */
public class BlockingQueue2 {
   final Lock lock = new ReentrantLock();
   final Condition notFull = lock.newCondition();
   final Condition notEmpty = lock.newCondition();
   final Object[] item = new Object[2];
   int putIndex,takeIndex,count;

   public void put(Object x) throws Exception{
       System.out.println("进入 --- put");
       lock.lock();
       try{
           while (count == item.length){
               notFull.await();
           }
           item[putIndex] = x;
           ++count;
           if(++putIndex == item.length){
               putIndex = 0;
           }
           notEmpty.signal();
       }finally {
           lock.unlock();
       }
   }

   public Object take()throws Exception{
       System.out.println("进入 --- take");
       lock.lock();
       try{
           while (count == 0){
               notEmpty.await();
           }
           Object x = item[takeIndex];
	   item[takeIndex] = null;
           --count;
           if(++takeIndex == item.length){
               takeIndex = 0;
           }
           notFull.signal();
           return x;
       }finally {
           lock.unlock();
       }
   }

    /**
     * synchronized实现
     */
    final Object notFu = new Object();
    final Object notEm = new Object();

    public void put_old(Object x)throws  Exception{
        synchronized (notFu){
            while(count == item.length){
                notFu.wait();
            }
        }
        item[putIndex] = x;
        ++count;
        if(++putIndex == item.length){
            putIndex = 0;
        }
        synchronized (notEm){
            notEm.notify();
        }
    }

    public Object take_old()throws Exception{
        synchronized (notEm){
            while(count == 0){
                notEm.wait();
            }
        }
        Object x = item[takeIndex];
	item[takeIndex] = null;
        --count;
        if(++takeIndex == item.length){
            takeIndex = 0;
        }
        synchronized (notFu){
            notFu.notify();
        }
        return x;
    }

}

package com.wang;

/**
 * Created by Administrator on 2017/8/19.
 * 斐波那契序列实现方式
 */
public class Fabonacci {
    // 递归实现方式
    public int fibonacci(int n){
        if(n <= 2){
            return n;
        }else{
            return fibonacci(n - 2) + fibonacci(n - 1);
        }
    }

    //同样的斐波那契序列问题，备忘录法(保存已经计算过的状态)，可以极大的提高程序的效率
    //是否可以提高性能，没测试出来，真实性有待验证
    //问题：一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法？
    //这个时候就像我们需要巧用数组下标了。可以当arr[n] = 0时，表示n还没计算过，当arr[n] != 0时
    //表示f(n)已经计算过，这时就可以把计算过的值直接返回回去了
    public int fibonarcci(int n){
        int[] status = new int[n]; //默认初始化，值均为0
        if(n <= 2){
            return n;
        }else{

            if(status[n] == 0){
                status[n] = fibonarcci(n-1) + fibonarcci(n-2);
            }
            return status[n];
        }
    }


    // 递推实现方式
    public static int fibonacciNormal(int n){
        if(n <= 2){
            return 1;
        }
        int n1 = 1, n2 = 1, sn = 0;
        for(int i = 0; i < n - 2; i ++){
            sn = n1 + n2;
            n1 = n2;
            n2 = sn;
        }
        return sn;
    }
}

2、自幂数介绍

一位自幂数：独身数
两位自幂数：没有
三位自幂数：水仙花数
四位自幂数：四叶玫瑰数
五位自幂数：五角星数
六位自幂数：六合数
七位自幂数：北斗七星数
八位自幂数：八仙数
九位自幂数：九九重阳数
十位自幂数：十全十美数

输出所有的水仙花数，所谓水仙花数是指一个3位数，其每位上数字的立方和等于其本身，
例如： 153 = 1*1*1 + 3*3*3 + 5*5*5

int number = 100; //范围是 100--999
int i,j,k; //分为是number的百位，十位，个位
for(int sum; number < 1000; number ++)
{
	i = number/100;
	j = ( number - i * 100)%10;
	k = number%10;
	if( number == i*i*i + j*j*j + k*k*k ){
		System.out.print(number);
	}
}

通用解法：------------
Math.pow(double a,double b) -- 求a的b次幂(a的b次方)
Math.sqrt(double a) -- a的开方 (根号a)
public static void perfectResolver( int n ){
	for(int value = (int)Math.pow(10,n-1); value < Math.pow(10,n);value++){
		int num = 0;
		for(int i = 0; i < n; i++){
			int temp = (int)(value/Math.pow(10,i))%10;
			num += Math.pow(temp,3);
		}
		if(value == num){
			System.out.println(value);
		}
	}
}

 //洗牌算法    --- 有完美洗牌算法
    //有个长度为2n的数组{a1,a2,a3,…,an,b1,b2,b3,…,bn}，希望排序后{a1,b1,a2,b2,….,an,bn}
    public static void shuffle( int [] arr,int n){
        int index ,count;
        int size = 2*n; //数组的长度
        for(int i = n; i < size; i++){
            //需要交换的个数
            count = n - 1 - (i - n);
            //待交换的元素下标
            index = i;
            for(int j = 1; j <= count; j++){
                swap(arr,index,i-j); //数组元素交换位置
                index = i - j;
            }
        }
        //查看结果
        System.out.println(Arrays.toString(arr));
    }

    //有一个字符串，打印该字符串中字符的所有排列
    /**
	* 思路 -- 1.所有可能出现在第一个位置上的字符
		把第一个字符和后面的所有字符交换
		  2.固定一个字符，求后面所有字符的全排列
		这是递归的思想
	*
    */
    public void sortStr(String str，int begin){
	if(begin == str.length()){
		System.out.println(str);
	}else{
		for(int i = begin; i < str.length(); i++ ){
		swap(str,begin);
		sortStr(str,begin+1);
		swap(str,begin);
		}
	}	
    }

手写单例模式: 一个类必须保证只能有一个实例存在
懒汉式：
Double-check 双重检查 提高效率--- 线程安全问题

public class Singleton{
	//私有构造
	private Singleton(){}
	//私有实例
	private static volatile Singleton instance;
	//公共获取实例
	public static Singleton getInstance(){
		//只有instance为null才会进入同步代码块中
		if(instance == null){
			synchronized (Singleton.class){
				if(instance == null){
					instance = new Singleton();
				}
			}
		}
		return instance;
	}
}

饥汉式：（初始化资源问题）

public class Single{
	private Single(){}
	private static final instance = new Single();
	public static Single getInstance(){
		return instance;
	}

}

题目：有十堆金币，有一堆是假的，其余是真的，假的每个都比真的少一克，
用电子秤称一次，怎么分出真假。
	答案：分别拿一个两个三个....十个出来。差多少克就是哪堆

题目：小明一家过一座桥，过桥时是黑夜，所以必须有灯。现在小明过桥要1秒，小明的弟弟要3秒，小明的爸爸要6秒，小明的妈妈要8秒，小明的爷爷要12秒。每次此桥最多可过两人，而过桥的速度依过桥最慢者而定，而且灯在点燃后30秒就会熄灭。问：小明一家如何过桥？
	小明 + 弟弟 过去 ——3秒 
	小明 回来—— 1秒 
	小明 + 爸爸 过去 —— 6秒 
	小明 回来 —— 1秒 
	爷爷 + 妈妈 过去 —— 12秒 
	弟弟 回来 —— 3秒 
	弟弟 + 小明 过去 —— 3秒
	一共 29秒，巧妙的方法吧？小明 + 弟弟 过去 ——3秒 

题目：n级台阶，每次可以走一级或是2级，一共有多少种走法
	本质 -- 斐波那契序列问题

	public int all(int a){
		if( n <= 0) return;
		if(n == 1 || n == 2) return n;
		return all(n-1) + all(n-2);
	}



    {
        "taskId": "uuid",
        "ids":[
            "uuid1",
            "uuid2"
        ]
    }




	

